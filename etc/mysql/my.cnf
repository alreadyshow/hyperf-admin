# For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html
[client]
port=3306
socket=/var/lib/mysql/mysql.sock

default-character-set=utf8

[mysqld]
skip-host-cache
skip-name-resolve
#lower_case_table_names=0
explicit_defaults_for_timestamp=true
default-time-zone=timezone="PRC"
log_timestamps=system
character-set-server=utf8

#
# Remove leading # and set to the amount of RAM for the most important data
# cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.
# innodb_buffer_pool_size = 128M
#
# Remove leading # to turn on a very important data integrity option: logging
# changes to the binary log between backups.
# log_bin
#
# Remove leading # to set options mainly useful for reporting servers.
# The server defaults are faster for transactions and fast SELECTs.
# Adjust sizes as needed, experiment to find the optimal values.
# join_buffer_size = 128M
# sort_buffer_size = 2M
# read_rnd_buffer_size = 2M

default-time_zone = '+8:00'

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

server-id=1
port=3306

user=mysql  

#事件开启
event_scheduler=1

#Mysql数据库存放目录  
datadir=/var/lib/mysql

#Mysql保存临时文件，如基于磁盘的大型排序，简单的临时表 
#tmpdir=/tmp/mysql

#服务端通信文件,若丢失则重启Mysql重新生成,若重启失败,则可能由于mysqld进程未杀死,用pkill mysql后则能重启成功Mysql 
socket=/var/lib/mysql/mysql.sock

#服务端pid进程文件,若丢失则重启Mysql重新生成,若重启失败,则可能由于mysqld进程未杀死,用pkill mysql后则能重启成功Mysql  
pid-file=/var/lib/mysql/mysqld.pid

#主要用于MyISAM存储引擎,如果多台服务器连接一个数据库则建议注释下面内容
#防止外部锁定表，允许外部文件级别的锁. 打开文件锁会对性能造成负面影响  
skip-external-locking

#用IP地址检查客户端的登录，可以用主机名
skip_name_resolve = 0


#最大连接数
max_connections = 2000
#最大错误连接数
max_connect_errors = 1000

#SQL数据包发送的大小，如果有BLOB对象建议修改成1G
max_allowed_packet = 128M

#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭
#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效
interactive_timeout = 1800
wait_timeout = 1800

#内部内存临时表的最大值 ，设置成128M。
#比如大数据量的group by ,order by时可能用到临时表，
#超过了这个值将写入磁盘，系统IO压力增大
tmp_table_size = 4G
max_heap_table_size = 4G


#SQL模式，主要是解决select字段中包含非group字段
sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'
#开启log bin模式，是否允许select中调用自定义函数
log_bin_trust_function_creators=1
#设置group_concat的字符串拼接长度
group_concat_max_len= 4294967295


##----------------------------用户进程分配到的内存设置BEGIN-----------------------------##
##每个session将会分配参数设置的内存大小
#用于表的顺序扫描，读出的数据暂存于read_buffer_size中，当buff满时或读完，将数据返回上层调用者
#用来做MYISAM表全表扫描的缓冲大小，对表进行顺序扫描的请求将分配一个读入缓冲区，MySql会为它分配一段内存缓冲区。read_buffer_size变量控制这一缓冲区的大小。如果对表的顺序扫描请求非常频繁，并且你认为频繁扫描进行得太慢，可以通过增加该变量值以及内存缓冲区大小提高其性能。  
read_buffer_size = 8M

#随机读（查询操作）缓冲区大小。当按任意顺序读取行时(例如，按照排序顺序)，将分配一个随机读缓存区。进行排序查询时，MySql会首先扫描一遍该缓冲，以避免磁盘搜索，提高查询速度，如果需要排序大量数据，可适当调高该值。但MySql会为每个客户连接发放该缓冲空间，所以应尽量适当设置该值，以避免内存开销过大。
read_rnd_buffer_size = 8M

#排序缓冲区用来处理类似orderby以及groupby队列所引起的排序，系统默认大小为2M,该参数对应分配内存是每个连接独占的，若有100个连接，实际分配的排序缓冲区大小为6*100；推荐设置为6M-8M，并不是越大越好，由于是connection级的参数，过大的设置+高并发可能会耗尽系统内存资源。例如：500个连接将会消耗 500*sort_buffer_size(8M)=4G内存，超过2KB的时候，就会使用mmap() 而不是 malloc() 来进行内存分配，导致效率降低。属重点优化参数。 
sort_buffer_size = 250k

join_buffer_size=2M

innodb_lru_scan_depth = 256

#设置threadcache池中可以缓存连接线程的最大数量，默认为0，该值表示可以重新利用保存在缓存中线程的数量，当断开连接时若缓存中还有空间，那么客户端的线程将被放到缓存中，如果线程重新被请求，那么请求将从缓存中读取，若果缓存中是空的或者是新的请求，那么线程将被重新创建。设置规律为：1G内存设置为8,2G内存设置为16,4G以上设置为64，如果有很多新的线程，增加这个值可以改善系统性能.通过比较 Connections 和 Threads_created 状态的变量，可以看到这个变量的作用
thread_cache_size=256

#指定索引缓冲区的大小，它决定了数据库索引处理的速度，尤其是索引读的速度，内存为4G时设置为256M或384M  
key_buffer_size=512M

#参数设置表高速缓存的数目。每个连接进来，都会至少打开一个表缓存。因此table_cache 的大小应与 max_connections 的设置有关。对于 200 个#并行运行的连接，应该让表的缓存至少有 200 × N ，这里 N 是应用可以执行的查询#的一个联接中表的最大数量。此外，还需要为临时表和文件保留一些额外的文件描述符。 
table_open_cache=20000

#MyISAM表发生变化时重新排序所需的缓冲  
myisam_sort_buffer_size = 128M

############################ 日志 设置 ##########################################
#数据库错误日志文件
log_error = /var/log/mysql/error.log
 
#慢查询sql日志设置
slow_query_log = 1
slow_query_log_file = /var/log/mysql/slow.log

#检查未使用到索引的sql
#log_queries_not_using_indexes = 0

#针对log_queries_not_using_indexes开启后，记录慢sql的频次、每分钟记录的条数
#log_throttle_queries_not_using_indexes = 5

# 作为从库时生效,从库复制中如何有慢sql也将被记录
#log_slow_slave_statements = 1

#慢查询执行的秒数，必须达到此值可被记录
long_query_time = 3

#检索的行数必须达到此值才可被记为慢查询
#min_examined_row_limit = 100
 
#mysql binlog日志文件保存的过期时间，过期后自动删除
expire_logs_days = 5


############################ bin-log 设置 ########################################
#开启mysql binlog功能
log-bin=/var/log/mysql-logbin/logbin

#binlog文件分割大小
max_binlog_size = 100M

#一般数据库中没什么大的事务，设成1~2M，默认32kb
binlog_cache_size = 16M

############################ INNODB 设置 ##########################################
#这对Innodb表来说非常重要。Innodb相比MyISAM表对缓冲更为敏感。MyISAM可以在默认的 key_buffer_size 设置下运行的可以，然而Innodb在默认的 innodb_buffer_pool_size 设置下却跟蜗牛似的。由于Innodb把数据和索引都缓存起来，无需留给操作系统太多的内存，因此如果只需要用Innodb的话则可以设置它高达 70-80% 的可用内存。一些应用于 key_buffer 的规则有 — 如果你的数据量不大，并且不会暴增，那么无需把 innodb_buffer_pool_size 设置的太大了。不要设置过大，否则，由于物理内存的竞争可能导致操作系统的换页颠簸。
innodb_buffer_pool_size=512M

#此参数确定写日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据，由于基本上每秒都会刷新一次,所以没有必要将此值设置的太大(甚至对于长事务而言)，MySQL开发人员建议设置为1－8M之间 
innodb_log_buffer_size=8M

innodb_open_files   = 400  
#innodb_io_capacity  = 400

innodb_log_file_size = 5M
innodb_log_buffer_size = 8M

#CPU多核处理能力设置，假设CPU是2颗4核的，设置如下
#读多，写少可以设成2:6的比例
#innodb_write_io_threads = 2
#innodb_read_io_threads = 2

############################ 其他内容 设置 ##########################################
[mysqldump]
quick
max_allowed_packet = 128M

[mysql]
no-auto-rehash

[myisamchk]
key_buffer_size = 20M
sort_buffer_size = 256k
read_buffer = 2M
write_buffer = 2M

[mysqlhotcopy]
interactive-timeout

[mysqld_safe]
#增加每个进程的可打开文件数量.
open-files-limit = 28192






